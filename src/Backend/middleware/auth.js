import authJWT from './authJWT.js';
import authFirebase from './authFirebase.js';

const auth = async (req, res, next) => {
  console.log("üîç Auth middleware called for:", req.method, req.path);
  const { token } = req.headers;

  if (!token) {
    console.log("‚ùå No token provided");
    return res.json({ success: false, message: "Kh√¥ng ƒë∆∞·ª£c ph√©p truy c·∫≠p. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i" });
  }

  console.log("üîç Token received:", token.substring(0, 50) + "...");

  // Ph√°t hi·ªán lo·∫°i token d·ª±a tr√™n ƒë·∫∑c ƒëi·ªÉm
  const isFirebaseToken = token.length > 800 && token.split('.').length === 3;
  const hasFirebaseHeader = token.startsWith('eyJhbGciOiJSUzI1NiI');  // Ki·ªÉm tra header c·ªßa Firebase token

  if (isFirebaseToken || hasFirebaseHeader) {
    console.log("üî• Detected Firebase token, using Firebase auth");

    // X·ª≠ l√Ω x√°c th·ª±c Firebase
    try {
      await authFirebase(req, res, next);  // ƒêi·ªÅn th√¥ng tin v√†o req.user
    } catch (error) {
      console.log("‚ö†Ô∏è Firebase auth failed, trying simple auth fallback");
      return simpleAuthFallback(req, res, next, token);  // X·ª≠ l√Ω fallback khi Firebase kh√¥ng th√†nh c√¥ng
    }
  } else {
    console.log("üîë Detected JWT token, using JWT auth");
    return authJWT(req, res, next);  // ƒêi·ªÅn th√¥ng tin v√†o req.user
  }
};

// Fallback khi kh√¥ng x√°c th·ª±c Firebase token th√†nh c√¥ng, d√πng JWT ho·∫∑c gi·∫£i m√£ tr·ª±c ti·∫øp Firebase token
const simpleAuthFallback = (req, res, next, token) => {
  try {
    // Gi·∫£i m√£ Firebase token
    const parts = token.split('.');
    const payload = JSON.parse(Buffer.from(parts[1], 'base64').toString());
    console.log("üîÑ Using simple auth fallback for user:", payload.user_id);

    req.body.userId = payload.user_id;  // G√°n userId v√†o body n·∫øu l√† Firebase token
    req.user = { uid: payload.user_id, email: payload.email || null, name: payload.name || null };
    console.log("‚úÖ Simple auth fallback successful for user:", payload.user_id);

    next();  // Ti·∫øp t·ª•c v·ªõi request
  } catch (error) {
    console.log("‚ùå Simple auth fallback failed:", error.message);
    res.json({ success: false, message: "Token kh√¥ng h·ª£p l·ªá" });
  }
};

export default auth;
