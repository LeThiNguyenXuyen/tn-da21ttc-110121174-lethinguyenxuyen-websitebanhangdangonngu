// controllers/reviewController.js
import Review from '../models/Review.js';
import Order from '../models/Order.js';

// Function ƒë·ªÉ th√™m ƒë√°nh gi√°
const addReview = async (req, res) => {
  try {
    const { productId, orderId, rating, comment } = req.body;
    const userId = req.body?.userId || req.user?.userId || req.user?.id || req.user?.uid;
    
    if (!userId) {
      return res.json({ success: false, message: "Kh√¥ng t√¨m th·∫•y th√¥ng tin user" });
    }
    
    console.log("‚≠ê Adding review:", { productId, orderId, rating, userId });
    
    // Ki·ªÉm tra xem ƒë∆°n h√†ng c√≥ t·ªìn t·∫°i v√† thu·ªôc v·ªÅ user kh√¥ng
    const order = await Order.findOne({ _id: orderId, userId });
    if (!order) {
      return res.json({ success: false, message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng" });
    }
    
    // Ki·ªÉm tra xem ƒë∆°n h√†ng ƒë√£ ƒë∆∞·ª£c giao ch∆∞a
    if (order.status.toLowerCase() !== 'delivered') {
      return res.json({
        success: false,
        message: "Ch·ªâ c√≥ th·ªÉ ƒë√°nh gi√° s·∫£n ph·∫©m sau khi ƒë√£ nh·∫≠n ƒë∆∞·ª£c h√†ng"
      });
    }
    
    // Ki·ªÉm tra xem s·∫£n ph·∫©m c√≥ trong ƒë∆°n h√†ng kh√¥ng
    const productInOrder = order.items.find(item => item._id === productId);
    if (!productInOrder) {
      return res.json({ 
        success: false, 
        message: "S·∫£n ph·∫©m kh√¥ng c√≥ trong ƒë∆°n h√†ng n√†y" 
      });
    }
    
    // Ki·ªÉm tra xem ƒë√£ ƒë√°nh gi√° s·∫£n ph·∫©m n√†y ch∆∞a
    const existingReview = await Review.findOne({ 
      userId, 
      productId, 
      orderId 
    });
    
    if (existingReview) {
      return res.json({ 
        success: false, 
        message: "B·∫°n ƒë√£ ƒë√°nh gi√° s·∫£n ph·∫©m n√†y r·ªìi" 
      });
    }
    
    // T·∫°o ƒë√°nh gi√° m·ªõi
    const newReview = new Review({
      userId,
      productId,
      orderId,
      rating: Math.max(1, Math.min(5, rating)), // ƒê·∫£m b·∫£o rating t·ª´ 1-5
      comment: comment || '',
      date: new Date()
    });
    
    await newReview.save();
    
    console.log("‚úÖ Review added successfully:", newReview._id);
    
    res.json({
      success: true,
      message: "ƒê√°nh gi√° ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng",
      review: newReview
    });
    
  } catch (error) {
    console.error("‚ùå Error adding review:", error);
    res.json({
      success: false,
      message: "L·ªói khi th√™m ƒë√°nh gi√°: " + error.message
    });
  }
};

// controllers/reviewController.js

const toggleReviewVisibility = async (req, res) => {
  try {
    const { reviewId, visible } = req.body;

    const review = await Review.findById(reviewId);
    if (!review) {
      return res.json({ success: false, message: "Kh√¥ng t√¨m th·∫•y b√¨nh lu·∫≠n" });
    }

    review.visible = visible; // true ho·∫∑c false
    await review.save();

    res.json({
      success: true,
      message: visible ? "Hi·ªÉn th·ªã b√¨nh lu·∫≠n th√†nh c√¥ng" : "·∫®n b√¨nh lu·∫≠n th√†nh c√¥ng",
      review
    });

  } catch (error) {
    console.error("‚ùå Error toggling visibility:", error);
    res.json({
      success: false,
      message: "L·ªói khi c·∫≠p nh·∫≠t hi·ªÉn th·ªã b√¨nh lu·∫≠n: " + error.message
    });
  }
};

// Function ƒë·ªÉ ch·ªânh s·ª≠a ƒë√°nh gi√°
const editReview = async (req, res) => {
  try {
    const { reviewId, rating, comment } = req.body;

    if (!rating || !comment) {
      return res.json({ success: false, message: "ƒê√°nh gi√° v√† b√¨nh lu·∫≠n kh√¥ng th·ªÉ ƒë·ªÉ tr·ªëng" });
    }

    // T√¨m v√† s·ª≠a b√¨nh lu·∫≠n
    const updatedReview = await Review.findByIdAndUpdate(
      reviewId,
      { rating, comment },
      { new: true }
    );

    if (!updatedReview) {
      return res.json({ success: false, message: "Kh√¥ng t√¨m th·∫•y b√¨nh lu·∫≠n ƒë·ªÉ ch·ªânh s·ª≠a" });
    }

    res.json({
      success: true,
      message: "B√¨nh lu·∫≠n ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t",
      review: updatedReview
    });

  } catch (error) {
    console.error("‚ùå Error editing review:", error);
    res.json({
      success: false,
      message: "L·ªói khi ch·ªânh s·ª≠a b√¨nh lu·∫≠n: " + error.message
    });
  }
};
// Function ƒë·ªÉ b√°o c√°o ƒë√°nh gi√°
const reportReview = async (req, res) => {
  try {
    const { reviewId } = req.body;

    const review = await Review.findById(reviewId);
    if (!review) {
      return res.json({ success: false, message: "Kh√¥ng t√¨m th·∫•y b√¨nh lu·∫≠n ƒë·ªÉ b√°o c√°o" });
    }

    review.reported = true;
    await review.save();

    res.json({
      success: true,
      message: "B√¨nh lu·∫≠n ƒë√£ ƒë∆∞·ª£c b√°o c√°o"
    });
  } catch (error) {
    console.error("‚ùå Error reporting review:", error);
    res.json({
      success: false,
      message: "L·ªói khi b√°o c√°o b√¨nh lu·∫≠n: " + error.message
    });
  }
};

// Function ƒë·ªÉ l·∫•y ƒë√°nh gi√° c·ªßa s·∫£n ph·∫©m
const getProductReviews = async (req, res) => {
  const { productId } = req.params;
  try {
    const reviews = await Review.find({ productId, visible: true }).sort({ date: -1 });


    // T√≠nh to√°n rating trung b√¨nh
    const totalRating = reviews.reduce((sum, review) => sum + review.rating, 0);
    const averageRating = reviews.length > 0 ? (totalRating / reviews.length).toFixed(1) : 0;

    res.json({
      success: true,
      reviews,
      averageRating: parseFloat(averageRating),
      totalReviews: reviews.length
    });
  } catch (error) {
    console.error("Error fetching reviews:", error);
    res.status(500).json({ success: false, message: 'L·ªói khi l·∫•y ƒë√°nh gi√° s·∫£n ph·∫©m' });
  }
};

// Function ƒë·ªÉ l·∫•y ƒë√°nh gi√° c·ªßa user
const getUserReviews = async (req, res) => {
  try {
    const userId = req.body?.userId || req.user?.userId || req.user?.id || req.user?.uid;
    
    if (!userId) {
      return res.json({ success: false, message: "Kh√¥ng t√¨m th·∫•y th√¥ng tin user" });
    }
    
    console.log("üìã Getting reviews for user:", userId);
    
    const reviews = await Review.find({ userId }).sort({ date: -1 });
    
    console.log(`‚úÖ Found ${reviews.length} reviews for user`);
    
    res.json({
      success: true,
      reviews: reviews
    });
    
  } catch (error) {
    console.error("‚ùå Error getting user reviews:", error);
    res.json({
      success: false,
      message: "L·ªói khi l·∫•y ƒë√°nh gi√° c·ªßa user: " + error.message
    });
  }
};

const deleteReview = async (req, res) => {
  try {
    const { reviewId } = req.params;

    // T√¨m v√† x√≥a b√¨nh lu·∫≠n
    const deletedReview = await Review.findByIdAndDelete(reviewId);
    
    if (!deletedReview) {
      return res.json({ success: false, message: "Kh√¥ng t√¨m th·∫•y b√¨nh lu·∫≠n ƒë·ªÉ x√≥a" });
    }

    res.json({
      success: true,
      message: "B√¨nh lu·∫≠n ƒë√£ ƒë∆∞·ª£c x√≥a",
      review: deletedReview
    });
  } catch (error) {
    console.error("‚ùå Error deleting review:", error);
    res.json({
      success: false,
      message: "L·ªói khi x√≥a b√¨nh lu·∫≠n: " + error.message
    });
  }
};

const replyToReview = async (req, res) => {
  try {
    const { reviewId, reply } = req.body;

    if (!reply || !reviewId) {
      return res.json({ success: false, message: "N·ªôi dung tr·∫£ l·ªùi kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng" });
    }

    const review = await Review.findById(reviewId);
    if (!review) {
      return res.json({ success: false, message: "Kh√¥ng t√¨m th·∫•y b√¨nh lu·∫≠n ƒë·ªÉ tr·∫£ l·ªùi" });
    }

    review.adminReply = reply;
    await review.save();

    res.json({
      success: true,
      message: "ƒê√£ tr·∫£ l·ªùi b√¨nh lu·∫≠n th√†nh c√¥ng",
      review
    });
  } catch (error) {
    console.error("‚ùå Error replying to review:", error);
    res.json({
      success: false,
      message: "L·ªói khi tr·∫£ l·ªùi b√¨nh lu·∫≠n: " + error.message
    });
  }
};


// Function ƒë·ªÉ admin l·∫•y t·∫•t c·∫£ b√¨nh lu·∫≠n
const getAllReviews = async (req, res) => {
  try {
    const reviews = await Review.find().sort({ date: -1 });

    res.json({
      success: true,
      message: "L·∫•y t·∫•t c·∫£ b√¨nh lu·∫≠n th√†nh c√¥ng",
      reviews
    });
  } catch (error) {
    console.error("‚ùå Error fetching all reviews:", error);
    res.json({
      success: false,
      message: "L·ªói khi l·∫•y t·∫•t c·∫£ b√¨nh lu·∫≠n: " + error.message
    });
  }
};


export { addReview, getProductReviews, getUserReviews, editReview, reportReview, deleteReview,getAllReviews,toggleReviewVisibility,replyToReview };


