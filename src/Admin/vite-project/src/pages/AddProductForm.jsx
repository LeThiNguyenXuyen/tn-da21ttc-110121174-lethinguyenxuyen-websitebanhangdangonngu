// src/pages/AddProductForm.jsx
import React, { useState } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom";
import { FaUpload, FaImage, FaTimes, FaSave, FaArrowLeft, FaCheck } from "react-icons/fa";
import "./ModernAddProduct.css";

const AddProductForm = () => {
  const navigate = useNavigate();
  const [form, setForm] = useState({
    name: "",
    price: "",
    importPrice: "",
    category: "",
    brand: "",
    sizes: "",
    description: "",
    quantity: "",
    image: null,
  });

  const [imagePreview, setImagePreview] = useState(null);
  const [loading, setLoading] = useState(false);
  const [errors, setErrors] = useState({});
  const [dragActive, setDragActive] = useState(false);

  // Validation function
  const validateForm = () => {
    const newErrors = {};

    if (!form.name.trim()) newErrors.name = "T√™n s·∫£n ph·∫©m l√† b·∫Øt bu·ªôc";
    if (!form.price || form.price <= 0) newErrors.price = "Gi√° b√°n ph·∫£i l·ªõn h∆°n 0";
    if (!form.importPrice || form.importPrice <= 0) newErrors.importPrice = "Gi√° nh·∫≠p ph·∫£i l·ªõn h∆°n 0";
    if (!form.category.trim()) newErrors.category = "Danh m·ª•c l√† b·∫Øt bu·ªôc";
    if (!form.brand.trim()) newErrors.brand = "Th∆∞∆°ng hi·ªáu l√† b·∫Øt bu·ªôc";
    if (!form.sizes.trim()) newErrors.sizes = "Sizes l√† b·∫Øt bu·ªôc";
    if (!form.description.trim()) newErrors.description = "M√¥ t·∫£ l√† b·∫Øt bu·ªôc";
    if (!form.quantity || form.quantity < 0) newErrors.quantity = "S·ªë l∆∞·ª£ng t·ªìn kho ph·∫£i >= 0";
    if (!form.image) newErrors.image = "H√¨nh ·∫£nh l√† b·∫Øt bu·ªôc";

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setForm({ ...form, [name]: value });

    // Clear error when user starts typing
    if (errors[name]) {
      setErrors({ ...errors, [name]: "" });
    }
  };

  const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      setForm({ ...form, image: file });

      // Create preview
      const reader = new FileReader();
      reader.onload = (e) => setImagePreview(e.target.result);
      reader.readAsDataURL(file);

      // Clear error
      if (errors.image) {
        setErrors({ ...errors, image: "" });
      }
    }
  };

  // Drag and drop handlers
  const handleDrag = (e) => {
    e.preventDefault();
    e.stopPropagation();
    if (e.type === "dragenter" || e.type === "dragover") {
      setDragActive(true);
    } else if (e.type === "dragleave") {
      setDragActive(false);
    }
  };

  const handleDrop = (e) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(false);

    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      const file = e.dataTransfer.files[0];
      setForm({ ...form, image: file });

      const reader = new FileReader();
      reader.onload = (e) => setImagePreview(e.target.result);
      reader.readAsDataURL(file);
    }
  };

  const removeImage = () => {
    setForm({ ...form, image: null });
    setImagePreview(null);
  };

  const handleAdd = async (e) => {
    e.preventDefault();

    if (!validateForm()) {
      return;
    }

    try {
      setLoading(true);
      const formData = new FormData();
      Object.entries(form).forEach(([key, value]) => {
        formData.append(key, value);
      });

      await axios.post("http://localhost:4000/api/product/add", formData);
      alert("‚úÖ Th√™m s·∫£n ph·∫©m th√†nh c√¥ng!");
      navigate("/products");
    } catch (error) {
      console.error("‚ùå L·ªói khi th√™m s·∫£n ph·∫©m:", error);
      alert("‚ùå Th√™m s·∫£n ph·∫©m th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i!");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="modern-add-product">
      {/* Header */}
      <div className="add-product-header">
        <button
          type="button"
          className="back-btn"
          onClick={() => navigate("/products")}
        >
          <FaArrowLeft /> Quay l·∫°i
        </button>
        <div className="header-content">
          <h1>‚ûï Th√™m s·∫£n ph·∫©m m·ªõi</h1>
          <p>ƒêi·ªÅn th√¥ng tin chi ti·∫øt ƒë·ªÉ th√™m s·∫£n ph·∫©m v√†o c·ª≠a h√†ng</p>
        </div>
      </div>

      <form onSubmit={handleAdd} className="modern-product-form">
        <div className="form-grid">
          {/* Left Column - Product Info */}
          <div className="form-section">
            <h3>üìù Th√¥ng tin s·∫£n ph·∫©m</h3>

            <div className="form-group">
              <label htmlFor="name">T√™n s·∫£n ph·∫©m *</label>
              <input
                type="text"
                id="name"
                name="name"
                value={form.name}
                onChange={handleChange}
                placeholder="Nh·∫≠p t√™n s·∫£n ph·∫©m..."
                className={errors.name ? "error" : ""}
              />
              {errors.name && <span className="error-message">{errors.name}</span>}
            </div>

            <div className="form-row">
              <div className="form-group">
                <label htmlFor="brand">Th∆∞∆°ng hi·ªáu *</label>
                <input
                  type="text"
                  id="brand"
                  name="brand"
                  value={form.brand}
                  onChange={handleChange}
                  placeholder="V√≠ d·ª•: Chanel, Dior..."
                  className={errors.brand ? "error" : ""}
                />
                {errors.brand && <span className="error-message">{errors.brand}</span>}
              </div>

              <div className="form-group">
                <label htmlFor="category">Danh m·ª•c *</label>
                <select
                  id="category"
                  name="category"
                  value={form.category}
                  onChange={handleChange}
                  className={errors.category ? "error" : ""}
                >
                  <option value="">Ch·ªçn danh m·ª•c</option>
                  <option value="N∆∞·ªõc hoa nam">N∆∞·ªõc hoa nam</option>
                  <option value="N∆∞·ªõc hoa n·ªØ">N∆∞·ªõc hoa n·ªØ</option>
                  <option value="N∆∞·ªõc hoa unisex">N∆∞·ªõc hoa unisex</option>
                </select>
                {errors.category && <span className="error-message">{errors.category}</span>}
              </div>
            </div>

            <div className="form-group">
              <label htmlFor="sizes">Sizes *</label>
              <input
                type="text"
                id="sizes"
                name="sizes"
                value={form.sizes}
                onChange={handleChange}
                placeholder="V√≠ d·ª•: 30ml, 50ml, 100ml"
                className={errors.sizes ? "error" : ""}
              />
              {errors.sizes && <span className="error-message">{errors.sizes}</span>}
              <small className="form-hint">Ph√¢n c√°ch c√°c size b·∫±ng d·∫•u ph·∫©y</small>
            </div>

            <div className="form-group">
              <label htmlFor="description">M√¥ t·∫£ s·∫£n ph·∫©m *</label>
              <textarea
                id="description"
                name="description"
                value={form.description}
                onChange={handleChange}
                placeholder="M√¥ t·∫£ chi ti·∫øt v·ªÅ s·∫£n ph·∫©m..."
                rows="4"
                className={errors.description ? "error" : ""}
              />
              {errors.description && <span className="error-message">{errors.description}</span>}
            </div>
          </div>

          {/* Right Column - Pricing & Image */}
          <div className="form-section">
            <h3>üí∞ Th√¥ng tin gi√° c·∫£</h3>

            <div className="form-group">
              <label htmlFor="price">Gi√° b√°n *</label>
              <input
                type="number"
                id="price"
                name="price"
                value={form.price}
                onChange={handleChange}
                placeholder="0"
                min="0"
                step="1000"
                className={errors.price ? "error" : ""}
              />
              {errors.price && <span className="error-message">{errors.price}</span>}
            </div>

            <div className="form-group">
              <label htmlFor="importPrice">Gi√° nh·∫≠p *</label>
              <input
                type="number"
                id="importPrice"
                name="importPrice"
                value={form.importPrice}
                onChange={handleChange}
                placeholder="0"
                min="0"
                step="1000"
                className={errors.importPrice ? "error" : ""}
              />
              {errors.importPrice && <span className="error-message">{errors.importPrice}</span>}
            </div>

            <h3>üì¶ Th√¥ng tin kho h√†ng</h3>

            <div className="form-group">
              <label htmlFor="quantity">S·ªë l∆∞·ª£ng t·ªìn kho *</label>
              <input
                type="number"
                id="quantity"
                name="quantity"
                value={form.quantity}
                onChange={handleChange}
                placeholder="0"
                min="0"
                className={errors.quantity ? "error" : ""}
              />
              {errors.quantity && <span className="error-message">{errors.quantity}</span>}
              <small className="form-hint">S·ªë l∆∞·ª£ng s·∫£n ph·∫©m hi·ªán c√≥ trong kho</small>
            </div>

            {/* Image Upload */}
            <div className="form-group">
              <label>H√¨nh ·∫£nh s·∫£n ph·∫©m *</label>
              <div
                className={`image-upload-area ${dragActive ? 'drag-active' : ''} ${errors.image ? 'error' : ''}`}
                onDragEnter={handleDrag}
                onDragLeave={handleDrag}
                onDragOver={handleDrag}
                onDrop={handleDrop}
              >
                {imagePreview ? (
                  <div className="image-preview">
                    <img src={imagePreview} alt="Preview" />
                    <button
                      type="button"
                      className="remove-image-btn"
                      onClick={removeImage}
                    >
                      <FaTimes />
                    </button>
                  </div>
                ) : (
                  <div className="upload-placeholder">
                    <FaImage className="upload-icon" />
                    <p>K√©o th·∫£ h√¨nh ·∫£nh v√†o ƒë√¢y ho·∫∑c</p>
                    <label htmlFor="image-input" className="upload-btn">
                      <FaUpload /> Ch·ªçn file
                    </label>
                    <input
                      type="file"
                      id="image-input"
                      accept="image/*"
                      onChange={handleFileChange}
                      style={{ display: 'none' }}
                    />
                  </div>
                )}
              </div>
              {errors.image && <span className="error-message">{errors.image}</span>}
            </div>
          </div>
        </div>

        {/* Form Actions */}
        <div className="form-actions">
          <button
            type="button"
            className="btn-cancel"
            onClick={() => navigate("/products")}
            disabled={loading}
          >
            <FaTimes /> H·ªßy b·ªè
          </button>
          <button
            type="submit"
            className="btn-submit"
            disabled={loading}
          >
            {loading ? (
              <>
                <div className="loading-spinner small"></div>
                ƒêang th√™m...
              </>
            ) : (
              <>
                <FaCheck /> Th√™m s·∫£n ph·∫©m
              </>
            )}
          </button>
        </div>
      </form>
    </div>
  );
};

export default AddProductForm;
