import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import './Checkout.css';
import { useCart } from '../../context/CartContext';
import { toast } from 'react-toastify';
import axios from 'axios';
import { useTranslation } from 'react-i18next';
import { paymentIcons } from '../../assets/assets';

const Checkout = () => {
  const { t } = useTranslation();
  const navigate = useNavigate();
  const { cart, clearCart, isUserLoggedIn, forceRefreshAuth } = useCart();
  const deliveryFee = 20000;
  const [addresses, setAddresses] = useState([]);

  const subtotal = cart.reduce((acc, item) => acc + (Number(item.price) || 0) * (Number(item.quantity) || 0), 0);
  const total = subtotal + deliveryFee;

  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    street: '',
    city: '',
    state: '',
    zipcode: '',
    country: 'VN',
    phone: ''
  });

  const [method, setMethod] = useState('stripe');

  useEffect(() => {
    forceRefreshAuth();

    const fetchAddress = async () => {
      const token = localStorage.getItem('token'); // L·∫•y token t·ª´ localStorage

      if (!token) {
        console.error("Kh√¥ng t√¨m th·∫•y token.");
        return;
      }

      try {
        const response = await axios.get('http://localhost:4000/api/address/list', {
          headers: { token } // G·ª≠i token tr·ª±c ti·∫øp trong header gi·ªëng nh∆∞ b·∫°n l√†m v·ªõi wishlist
        });

        // X·ª≠ l√Ω d·ªØ li·ªáu t·ª´ response
        if (response.data.success && Array.isArray(response.data.addressList)) {
          setAddresses(response.data.addressList); // C·∫≠p nh·∫≠t danh s√°ch ƒë·ªãa ch·ªâ v√†o state
        }
      } catch (error) {
        console.error("Kh√¥ng th·ªÉ l·∫•y danh s√°ch ƒë·ªãa ch·ªâ:", error);
      }
    };




    fetchAddress();

    const pendingData = localStorage.getItem('pendingCheckoutData');
    if (pendingData) {
      try {
        const { formData: savedFormData, timestamp } = JSON.parse(pendingData);
        const thirtyMinutes = 30 * 60 * 1000;
        if (Date.now() - timestamp < thirtyMinutes) {
          setFormData(savedFormData);
          toast.success("‚úÖ ƒê√£ kh√¥i ph·ª•c th√¥ng tin ƒë·∫∑t h√†ng c·ªßa b·∫°n!");
        }
        localStorage.removeItem('pendingCheckoutData');
      } catch (error) {
        localStorage.removeItem('pendingCheckoutData');
      }
    }
  }, []);

  const handleDeleteAddress = async (addressId) => {
    const token = localStorage.getItem('token');  // l·∫•y token t·ª´ localStorage
    if (!token) return;

    if (!window.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën xo√° ƒë·ªãa ch·ªâ n√†y kh√¥ng?")) return;

    try {
      const res = await axios.delete(`http://localhost:4000/api/address/delete/${addressId}`, {
        headers: {
          token: token  // ‚úÖ G·ª≠i token v·ªõi key l√† 'token'
        }
      });
      if (res.data.success) {
        setAddresses(prev => prev.filter(addr => addr._id !== addressId));
        toast.success("‚úÖ ƒê√£ xo√° ƒë·ªãa ch·ªâ giao h√†ng!");
      } else {
        toast.error("‚ùå Kh√¥ng th·ªÉ xo√° ƒë·ªãa ch·ªâ: " + res.data.message);
      }
    } catch (error) {
      toast.error("‚ùå L·ªói khi xo√° ƒë·ªãa ch·ªâ: " + (error.response?.data?.message || error.message));
    }
  };





  const handleChange = (e) => {
    const { name, value } = e.target;
    if (name === 'phone' && !/^[0-9+\-\s()]*$/.test(value)) return;
    if (name === 'zipcode' && !/^[0-9A-Za-z\s\-]*$/.test(value)) return;
    setFormData({ ...formData, [name]: value });
  };

  const handleStripe = async () => {
    const token = localStorage.getItem("token");
    
    const orderData = {
      address: formData,
      items: cart.map(item => ({
        _id: item._id || item.itemId,
        name: item.name,
        price: item.price,
        quantity: item.quantity,
        image: item.image
      })),
     amount: subtotal + deliveryFee,
      payment: 'stripe'
    };

    console.log("D·ªØ li·ªáu ƒë∆°n h√†ng Stripe:", orderData);  // Log d·ªØ li·ªáu ƒë∆°n h√†ng ƒë·ªÉ ki·ªÉm tra

    try {
      const response = await axios.post("http://localhost:4000/api/order/place", orderData, {
        headers: { token }
      });

      console.log("Ph·∫£n h·ªìi t·ª´ backend t·∫°o ƒë∆°n h√†ng:", response.data);  // Log ph·∫£n h·ªìi t·ª´ backend

      if (response.data.success) {
        // Ki·ªÉm tra n·∫øu URL c√≥ trong ph·∫£n h·ªìi t·ª´ backend
        if (response.data.url) {
          console.log("Stripe checkout URL:", response.data.url);  // Log URL thanh to√°n c·ªßa Stripe
          clearCart();
          window.location.replace(response.data.url);  // ƒêi·ªÅu h∆∞·ªõng ng∆∞·ªùi d√πng ƒë·∫øn Stripe checkout
        } else {
          console.error("L·ªói: Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ƒë∆∞·ªùng link thanh to√°n t·ª´ Stripe.");
          alert("L·ªói: Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ƒë∆∞·ªùng link thanh to√°n t·ª´ Stripe.");
        }
      } else {
        console.error("L·ªói khi ƒë·∫∑t h√†ng:", response.data.message);
        alert("L·ªói: " + (response.data.message || "Kh√¥ng th·ªÉ ƒë·∫∑t h√†ng"));
      }
    } catch (error) {
      console.error("L·ªói khi g·ªçi API backend:", error);  // Log l·ªói n·∫øu c√≥
      alert("C√≥ l·ªói x·∫£y ra khi ƒë·∫∑t h√†ng: " + (error.response?.data?.message || error.message));
    }
  };


  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!isUserLoggedIn()) {
      localStorage.setItem('pendingCheckoutData', JSON.stringify({ formData, cart, timestamp: Date.now() }));
      localStorage.setItem('redirectAfterLogin', '/checkout');
      alert("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ ƒë·∫∑t h√†ng!");
      navigate('/login');
      return;
    }

    if (cart.length === 0) return alert("Gi·ªè h√†ng tr·ªëng!");
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    const phoneNumbers = formData.phone.replace(/[^0-9]/g, '');
    if (!formData.firstName || !formData.lastName || !formData.email || !formData.street ||
      !formData.city || !formData.state || !formData.zipcode || !formData.country || !formData.phone) {
      return alert(t('shippingInfo'));
    }
    if (!emailRegex.test(formData.email)) return alert("Email kh√¥ng h·ª£p l·ªá!");
    if (phoneNumbers.length < 10) return alert("S·ªë ƒëi·ªán tho·∫°i ph·∫£i c√≥ √≠t nh·∫•t 10 ch·ªØ s·ªë!");

    // üîÅ G·ªçi ƒë√∫ng handler theo method:
    if (method === 'stripe') {
      await handleStripe();
    } else if (method === 'payos') {
      await handlePayOS();
    } else if (method === 'cod') {
      await handleCOD();
    }
  };


  const handleCOD = async () => {
    try {
      const token = localStorage.getItem("token");
      const userId = localStorage.getItem('userId'); // ƒê·∫£m b·∫£o l·∫•y userId t·ª´ localStorage

      if (!userId) {
        console.error("Kh√¥ng t√¨m th·∫•y userId trong localStorage");
        return;
      }

      const orderData = {
        address: formData,
        items: cart.map(item => ({
          _id: item._id || item.itemId,
          name: item.name,
          price: item.price,
          quantity: item.quantity,
          image: item.image
        })),
        amount: total,
        payment: 'COD',
        userId: userId  // ƒê·∫£m b·∫£o userId ƒë∆∞·ª£c truy·ªÅn v√†o ƒë√∫ng
      };

      console.log("D·ªØ li·ªáu ƒë∆°n h√†ng COD:", orderData);  // Log d·ªØ li·ªáu ƒë·ªÉ ki·ªÉm tra

      const response = await axios.post("http://localhost:4000/api/order/placeCOD", orderData, {
        headers: { token }
      });

      if (response.data.success) {
        await axios.post('http://localhost:4000/api/order/reduceStock', { items: orderData.items }, { headers: { token } });

        clearCart();
        toast.success("üßæ ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t. Thanh to√°n khi nh·∫≠n h√†ng!");
        navigate('/my-orders');
      } else {
        alert("L·ªói: " + (response.data.message || "Kh√¥ng th·ªÉ ƒë·∫∑t h√†ng"));
      }
    } catch (error) {
      console.error("L·ªói khi ƒë·∫∑t h√†ng (COD):", error);
      alert("L·ªói khi ƒë·∫∑t h√†ng (COD): " + (error.response?.data?.message || error.message));
    }
  };



  const handlePayOS = async () => {
    try {
      const orderData = {
        address: formData,
        items: cart.map(item => ({
          _id: item._id || item.itemId,
          name: item.name,
          quantity: item.quantity,
          price: item.price,
          image: item.image
        })),
        amount: total,
        userId: localStorage.getItem('userId')  // L·∫•y userId t·ª´ localStorage ho·∫∑c sessionStorage
      };

      const token = localStorage.getItem('token'); // Ho·∫∑c sessionStorage.getItem('token')

      if (!token) {
        alert("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ thanh to√°n.");
        return;
      }

      // G·ª≠i y√™u c·∫ßu ƒë·∫øn backend v·ªõi token trong header v√† userId trong body
      const response = await axios.post(
        'http://localhost:4000/api/order/payos',
        orderData,
        {
          headers: {
            Authorization: `Bearer ${token}` // Th√™m token v√†o header y√™u c·∫ßu
          }
        }
      );

      if (response.data.success && response.data.checkoutUrl) {
        clearCart();
        window.location.href = response.data.checkoutUrl;
      } else {
        alert("L·ªói t·∫°o link thanh to√°n PayOS: " + response.data.message || "Vui l√≤ng th·ª≠ l·∫°i.");
      }
    } catch (error) {
      console.error('L·ªói k·∫øt n·ªëi ƒë·∫øn PayOS:', error);
      alert("L·ªói k·∫øt n·ªëi ƒë·∫øn PayOS: " + (error.response?.data?.message || error.message || "Vui l√≤ng th·ª≠ l·∫°i."));
    }
  };




  return (
    <div className="checkout-page">
      {addresses.length > 0 && (
        <div className="address-list">
         <h4>{t('checkout.chooseAddress')}</h4>
          {addresses.map((addr) => (
            <div key={addr._id} className={`address-card ${formData._id === addr._id ? 'selected' : ''}`}>
              <p>{addr.firstName} {addr.lastName}, {addr.street}, {addr.city}, {addr.state}, {addr.zipcode}, {addr.country}</p>
              <p>üìû {addr.phone} | ‚úâÔ∏è {addr.email}</p>
              <button onClick={() => setFormData(prev => ({
                ...prev,
                firstName: addr.firstName,
                lastName: addr.lastName,
                email: addr.email,
                street: addr.street,
                city: addr.city,
                state: addr.state,
                zipcode: addr.zipcode,
                country: addr.country || 'VN',
                phone: addr.phone,
                _id: addr._id
              }))}>{t('checkout.useThisAddress')}</button>

            <button onClick={() => navigate(`/address/edit/${addr._id}`)} className="edit-address-btn">{t('edit')}</button>
             <button onClick={() => handleDeleteAddress(addr._id)}>{t('delete')}</button>


            </div>
          ))}
        </div>
      )}


      <form onSubmit={handleSubmit} className="checkout-form">
        <h2 className="hidden">{t('shippingInfo')}</h2>

        <div className="form-grid">
           <button onClick={() => navigate('/address')} className="change-address-btn">
         {t('checkout.addNewAddress')}
       </button>

        </div>

        <div className="payment-method">
          <label className={`payment-option ${method === 'stripe' ? 'selected' : ''}`}>
            <input
              type="radio"
              name="payment"
              value="stripe"
              checked={method === 'stripe'}
              onChange={() => setMethod('stripe')}
            />
            <img src={paymentIcons.stripe} alt="Stripe" className="payment-icon" />
             {t('payment.stripe')}
          </label>

          <label className={`payment-option ${method === 'payos' ? 'selected' : ''}`}>
            <input
              type="radio"
              name="payment"
              value="payos"
              checked={method === 'payos'}
              onChange={() => setMethod('payos')}
            />
            <img src={paymentIcons.payos} alt="PayOS" className="payment-icon" />
           {t('payment.payos')}

          </label>

          <label className={`payment-option ${method === 'cod' ? 'selected' : ''}`}>
            <input
              type="radio"
              name="payment"
              value="cod"
              checked={method === 'cod'}
              onChange={() => setMethod('cod')}
            />
            <img src={paymentIcons.cod} alt="COD" className="payment-icon" />
            {t('payment.cod')}
          </label>
        </div>


        <button type="submit" className="checkout-btn">{t('checkout.placeOrder')}</button>
      </form>

      <div className="checkout-summary">
        <h3>{t('orderSummary')}</h3>
        <p><span>{t('subtotal')}</span><span>{subtotal.toLocaleString()} ƒë</span></p>
        <p><span>{t('shippingFee')}</span><span>{deliveryFee.toLocaleString()} ƒë</span></p>
        <hr />
        <p className="total"><span>{t('total')}</span><span>{total.toLocaleString()} ƒë</span></p>
      </div>
    </div>
  );
};

export default Checkout;
